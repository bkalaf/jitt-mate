import { app, BrowserWindow, dialog, ipcMain, session } from 'electron';
import { initialize, enable } from '@electron/remote/main';
import * as fs from 'graceful-fs';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

app.commandLine.appendSwitch('enable-features', 'WebSpeechAPI');
app.commandLine.appendSwitch('enable-speech-dispatcher');

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}
initialize();

export function getDevToolsPath(id: string) {
    const chromePath = '/home/bobby/.config/google-chrome/Default/Extensions';
    const devPath = [chromePath, id].join('/');
    const version = fs.readdirSync(devPath)[0];
    return [devPath, version].join('/');
}
const createWindow = () => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        darkTheme: true,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
            nodeIntegration: true,
            nodeIntegrationInSubFrames: true,
            nodeIntegrationInWorker: true,
            webSecurity: false,
            contextIsolation: false,
            zoomFactor: 0.8,
            spellcheck: true
        }        
    });

    enable(mainWindow.webContents);
    // and load the index.html of the app.
    return mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY).then(() => {
        mainWindow.webContents.openDevTools();
        mainWindow.maximize();
        mainWindow.setTitle('JUNK IN THE TRUNK, INC')
        return mainWindow;
    });
};

let browserWindow: BrowserWindow | undefined;
app.whenReady()
    .then(async () => {
        const devPath = getDevToolsPath('fmkadmapgofadopljbjfkapdkoienihi');
        const extId = await session.defaultSession.loadExtension(devPath, { allowFileAccess: true });
        console.log(JSON.stringify(extId));
    })
    .then(() => {
        ipcMain.handle('get-files', async(event, dir) => {
            if (browserWindow == null) throw new Error('no window');
            const response = await dialog.showOpenDialog(browserWindow, {
                title: 'Choose files...',
                message: 'Pick files to upload',
                defaultPath: dir,
                properties: ['multiSelections']
            });
            return response.canceled ? [] : response.filePaths;
        });
        ipcMain.handle('confirm-cancel', async (): Promise<number> => {
            if (browserWindow == null) throw new Error('no window');
            const response = await dialog.showMessageBox(browserWindow, {
                message: 'Are you sure you want to lose any unsaved work?',
                title: 'Please confirm',
                buttons: ['CANCEL', 'OK'],
                defaultId: 0,
                type: 'question',
                cancelId: 0
            });
            console.log(`response`, response)
            return response.response;
        });
    })
    .then(async () => browserWindow = await createWindow())
    .catch(err => {
        console.error((err as Error).message);
        process.stdout.write((err as Error).message);
    });

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// // Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

